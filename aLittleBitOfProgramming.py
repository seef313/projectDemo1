"""
A little bit of programming 
    Create an HTTP service that complies with the following requirements: 
    1. Written in any language you think is appropriate. (i.e. python,go, rust).  - We can use flask for this it simple and straight forward to use.
    2. Command-line flag for the listening port (defaults to 8080) and environment variable override. 3. Use mostly standard libraries. - Flask can make this easy as well 
    4. Please provide a Makefile (or use a similar tool) to define tasks 
    5. Three HTTP endpoints: 
        /helloworld                     -x 
            --> returns "Hello Stranger"                    -x 
        /helloworld?name=AlfredENeumann (any filtered value) <= wasnt sure if this qualifies as a serprate endpoint 
            --> returns "Hello Alfred E Neumann" (camel-case gets cut by spaces) 
        /versionz                                                                    
            --> returns a JSON with git hash and name of the project (needs to be compiled in) #json library with helpful function? 
    6. A structured log is written to standard out with:  # we can use python logging level to make this easy
            ISO date 
            HTTP status  #generated by flask? 
            Request 
    7. Write a readme file with usage examples. 
    8. Unit testing of all functionalities (flags, endpoints, etc.).  #how to do this? 
    9. A production-ready Dockerfile, so the service can run safely inside a 
       container. 
    10. Documentation where it makes sense.
"""
import subprocess, git, json, jsonify , datetime
from flask import Flask, redirect, url_for, render_template, request


# Flask
app = Flask(__name__)
app.config["DEBUG"] = True


# helloworld 
@app.route("/") #setting default landing to hello world 
@app.route("/helloworld", methods=["GET", "POST"])
def helloWorld():
    if request.args:
        args = request.args 
        print( ''.join(' ' + c if c.isupper() else c for c in args.get("name"))) #to turn camel caase into space)
    return ("Hello Stranger" ) #this accomplishes task of /helloworld endpoint (5a) 
    #return (args.get("name")) #returns the name from query field 

#?name=AlfredENeumann

#function to get git hash 
def get_git_revision_short_hash() -> str:
    return subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode('ascii').strip()

@app.route("/versionz", methods=["GET", "POST"])
def versionz():
    repo = git.Repo(search_parent_directories=True)
    sha = repo.head.object.hexsha
    name =  repo.remotes.origin.url.split('.git')[0].split('/')[-1]
    #5c 
    load = {
        "Project": name , 
        "Hash" : sha  
    }
    return(load)


# def aLog(): 
#     log = (
#         logging.info(datetime.now().isoformat())
#         logging.info()
#         logging.info()
#     )

    
def aLog(): 
    log =  [
        {
            "ISOdate" : datetime.now().isoformat(),
            "HTTPstatus" : None,
            "Request":None
        }
    ]
    




if __name__ == "__main__":
    app.run(port=3000)