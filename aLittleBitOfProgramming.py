"""
A little bit of programming 
    Create an HTTP service that complies with the following requirements: 
    1. Written in any language you think is appropriate. (i.e. python,go, rust).  - We can use flask for this it simple and straight forward to use.
    2. Command-line flag for the listening port (defaults to 8080) and environment variable override. 3. Use mostly standard libraries. - Flask can make this easy as well 
    4. Please provide a Makefile (or use a similar tool) to define tasks 
    5. Three HTTP endpoints: 
        /helloworld                     -x 
            --> returns "Hello Stranger"                    -x 
        /helloworld?name=AlfredENeumann (any filtered value) #need to set up html page to track name field
            --> returns "Hello Alfred E Neumann" (camel-case gets cut by spaces) 
        /versionz      #which libraries to use?                                                                          
            --> returns a JSON with git hash and name of the project (needs to be compiled in) #json library with helpful function? 
    6. A structured log is written to standard out with:  # we can use python debug to make this easy
            ISO date 
            HTTP status  #generated by flask? 
            Request 
    7. Write a readme file with usage examples. 
    8. Unit testing of all functionalities (flags, endpoints, etc.).  #how to do this? 
    9. A production-ready Dockerfile, so the service can run safely inside a 
       container. 
    10. Documentation where it makes sense.
"""

from flask import Flask, redirect, url_for, render_template, request


# Flask
app = Flask(__name__)
app.config["DEBUG"] = True


# helloworld 
@app.route("/") #setting default landing to hello world 
@app.route("/helloworld", methods=["GET", "POST"])
def helloWorld():
    return "Hello Stranger" 


# @app.route("/helloworld/<name>", methods=["GET", "POST"])
# def helloWorldName(name):
#     return (request.args.get('name'))
 

if __name__ == "__main__":
    app.run(port=3000)